// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.1
// source: errors.proto

package gitalypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ErrorType is the type of error encountered on the index operation.
type IndexError_ErrorType int32

const (
	// ERROR_TYPE_UNSPECIFIED is the default error type and should never be set.
	IndexError_ERROR_TYPE_UNSPECIFIED IndexError_ErrorType = 0
	// ERROR_TYPE_EMPTY_PATH indicates an empty path was provided by the caller.
	IndexError_ERROR_TYPE_EMPTY_PATH IndexError_ErrorType = 1
	// ERROR_TYPE_INVALID_PATH indicates a path either contained '.git', or was
	// incorrectly formated, e.g. invalid://file/path.
	IndexError_ERROR_TYPE_INVALID_PATH IndexError_ErrorType = 2
	// ERROR_TYPE_DIRECTORY_EXISTS indicates the directory being created already exists.
	IndexError_ERROR_TYPE_DIRECTORY_EXISTS IndexError_ErrorType = 3
	// ERROR_TYPE_DIRECTORY_TRAVERSAL indicates the path contains a directory traversal
	// sequence.
	IndexError_ERROR_TYPE_DIRECTORY_TRAVERSAL IndexError_ErrorType = 4
	// ERROR_TYPE_FILE_EXISTS indicates the file being created already exists.
	IndexError_ERROR_TYPE_FILE_EXISTS IndexError_ErrorType = 5
	// ERROR_TYPE_FILE_NOT_FOUND indicates the file being updated does not exist.
	IndexError_ERROR_TYPE_FILE_NOT_FOUND IndexError_ErrorType = 6
)

// Enum value maps for IndexError_ErrorType.
var (
	IndexError_ErrorType_name = map[int32]string{
		0: "ERROR_TYPE_UNSPECIFIED",
		1: "ERROR_TYPE_EMPTY_PATH",
		2: "ERROR_TYPE_INVALID_PATH",
		3: "ERROR_TYPE_DIRECTORY_EXISTS",
		4: "ERROR_TYPE_DIRECTORY_TRAVERSAL",
		5: "ERROR_TYPE_FILE_EXISTS",
		6: "ERROR_TYPE_FILE_NOT_FOUND",
	}
	IndexError_ErrorType_value = map[string]int32{
		"ERROR_TYPE_UNSPECIFIED":         0,
		"ERROR_TYPE_EMPTY_PATH":          1,
		"ERROR_TYPE_INVALID_PATH":        2,
		"ERROR_TYPE_DIRECTORY_EXISTS":    3,
		"ERROR_TYPE_DIRECTORY_TRAVERSAL": 4,
		"ERROR_TYPE_FILE_EXISTS":         5,
		"ERROR_TYPE_FILE_NOT_FOUND":      6,
	}
)

func (x IndexError_ErrorType) Enum() *IndexError_ErrorType {
	p := new(IndexError_ErrorType)
	*p = x
	return p
}

func (x IndexError_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexError_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_errors_proto_enumTypes[0].Descriptor()
}

func (IndexError_ErrorType) Type() protoreflect.EnumType {
	return &file_errors_proto_enumTypes[0]
}

func (x IndexError_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexError_ErrorType.Descriptor instead.
func (IndexError_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{1, 0}
}

// HookType is the type of the hook that has been running. Please consult githooks(5) for more
// information about the specific types.
type CustomHookError_HookType int32

const (
	// HOOK_TYPE_UNSPECIFIED is the default hook type and should never be set.
	CustomHookError_HOOK_TYPE_UNSPECIFIED CustomHookError_HookType = 0
	// HOOK_TYPE_PRERECEIVE is executed after all changes have been written into a temporary staging
	// directory, but before any references in the repository have been updated. It is executed with
	// all references that are about to be updated at once. If this hook exits, then no references
	// will have been updated in the repository and staged objects will have been discarded.
	CustomHookError_HOOK_TYPE_PRERECEIVE CustomHookError_HookType = 1
	// HOOK_TYPE_UPDATE is executed after the pre-receive hook. It is executed per reference that is
	// about to be updated and can be used to reject only a subset of reference updates. If this
	// hook error is raised then a subset of references may have already been updated.
	CustomHookError_HOOK_TYPE_UPDATE CustomHookError_HookType = 2
	// HOOK_TYPE_POSTRECEIVE is executed after objects have been migrated into the repository and
	// after references have been updated. An error in this hook will not impact the changes
	// anymore as everything has already been persisted.
	CustomHookError_HOOK_TYPE_POSTRECEIVE CustomHookError_HookType = 3
)

// Enum value maps for CustomHookError_HookType.
var (
	CustomHookError_HookType_name = map[int32]string{
		0: "HOOK_TYPE_UNSPECIFIED",
		1: "HOOK_TYPE_PRERECEIVE",
		2: "HOOK_TYPE_UPDATE",
		3: "HOOK_TYPE_POSTRECEIVE",
	}
	CustomHookError_HookType_value = map[string]int32{
		"HOOK_TYPE_UNSPECIFIED": 0,
		"HOOK_TYPE_PRERECEIVE":  1,
		"HOOK_TYPE_UPDATE":      2,
		"HOOK_TYPE_POSTRECEIVE": 3,
	}
)

func (x CustomHookError_HookType) Enum() *CustomHookError_HookType {
	p := new(CustomHookError_HookType)
	*p = x
	return p
}

func (x CustomHookError_HookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomHookError_HookType) Descriptor() protoreflect.EnumDescriptor {
	return file_errors_proto_enumTypes[1].Descriptor()
}

func (CustomHookError_HookType) Type() protoreflect.EnumType {
	return &file_errors_proto_enumTypes[1]
}

func (x CustomHookError_HookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomHookError_HookType.Descriptor instead.
func (CustomHookError_HookType) EnumDescriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{13, 0}
}

// ErrorType is the type of error encountered.
type PathError_ErrorType int32

const (
	// ERROR_TYPE_UNSPECIFIED is the default error type and should never be set.
	PathError_ERROR_TYPE_UNSPECIFIED PathError_ErrorType = 0
	// ERROR_TYPE_EMPTY_PATH is the error type when the provided path is empty.
	PathError_ERROR_TYPE_EMPTY_PATH PathError_ErrorType = 1
	// ERROR_TYPE_RELATIVE_PATH_ESCAPES_REPOSITORY is the error type when there are
	// traversing components found in the path and it either escapes the repository or is not
	// supported by the RPC.
	PathError_ERROR_TYPE_RELATIVE_PATH_ESCAPES_REPOSITORY PathError_ErrorType = 2
	// ERROR_TYPE_ABSOLUTE_PATH is the error type when an absolute path is provided
	// while a relative path was expected.
	PathError_ERROR_TYPE_ABSOLUTE_PATH PathError_ErrorType = 3
	// ERROR_TYPE_LONG_PATH is the error type when the path is too long.
	PathError_ERROR_TYPE_LONG_PATH PathError_ErrorType = 4
)

// Enum value maps for PathError_ErrorType.
var (
	PathError_ErrorType_name = map[int32]string{
		0: "ERROR_TYPE_UNSPECIFIED",
		1: "ERROR_TYPE_EMPTY_PATH",
		2: "ERROR_TYPE_RELATIVE_PATH_ESCAPES_REPOSITORY",
		3: "ERROR_TYPE_ABSOLUTE_PATH",
		4: "ERROR_TYPE_LONG_PATH",
	}
	PathError_ErrorType_value = map[string]int32{
		"ERROR_TYPE_UNSPECIFIED":                      0,
		"ERROR_TYPE_EMPTY_PATH":                       1,
		"ERROR_TYPE_RELATIVE_PATH_ESCAPES_REPOSITORY": 2,
		"ERROR_TYPE_ABSOLUTE_PATH":                    3,
		"ERROR_TYPE_LONG_PATH":                        4,
	}
)

func (x PathError_ErrorType) Enum() *PathError_ErrorType {
	p := new(PathError_ErrorType)
	*p = x
	return p
}

func (x PathError_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PathError_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_errors_proto_enumTypes[2].Descriptor()
}

func (PathError_ErrorType) Type() protoreflect.EnumType {
	return &file_errors_proto_enumTypes[2]
}

func (x PathError_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PathError_ErrorType.Descriptor instead.
func (PathError_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{14, 0}
}

// AccessCheckError is an error returned by GitLab's `/internal/allowed`
// endpoint.
type AccessCheckError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error_message is the error message as returned by the endpoint.
	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// protocol is the protocol used.
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// user_id is the user ID as which changes had been pushed.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// changes is the set of changes which have failed the access check.
	Changes []byte `protobuf:"bytes,4,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *AccessCheckError) Reset() {
	*x = AccessCheckError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessCheckError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessCheckError) ProtoMessage() {}

func (x *AccessCheckError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessCheckError.ProtoReflect.Descriptor instead.
func (*AccessCheckError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{0}
}

func (x *AccessCheckError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *AccessCheckError) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *AccessCheckError) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AccessCheckError) GetChanges() []byte {
	if x != nil {
		return x.Changes
	}
	return nil
}

// IndexError is an error returned when an operation fails to due a conflict with
// the repository index.
type IndexError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the file or directory path that triggered the error.
	Path []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// error_type is the type of index error that occurred.
	ErrorType IndexError_ErrorType `protobuf:"varint,2,opt,name=error_type,json=errorType,proto3,enum=gitaly.IndexError_ErrorType" json:"error_type,omitempty"`
}

func (x *IndexError) Reset() {
	*x = IndexError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexError) ProtoMessage() {}

func (x *IndexError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexError.ProtoReflect.Descriptor instead.
func (*IndexError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{1}
}

func (x *IndexError) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *IndexError) GetErrorType() IndexError_ErrorType {
	if x != nil {
		return x.ErrorType
	}
	return IndexError_ERROR_TYPE_UNSPECIFIED
}

// InvalidRefFormatError is an error returned when refs have an invalid format.
type InvalidRefFormatError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// refs are the offending refs with invalid formats.
	Refs [][]byte `protobuf:"bytes,2,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (x *InvalidRefFormatError) Reset() {
	*x = InvalidRefFormatError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidRefFormatError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidRefFormatError) ProtoMessage() {}

func (x *InvalidRefFormatError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidRefFormatError.ProtoReflect.Descriptor instead.
func (*InvalidRefFormatError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{2}
}

func (x *InvalidRefFormatError) GetRefs() [][]byte {
	if x != nil {
		return x.Refs
	}
	return nil
}

// NotAncestorError is an error returned when parent_revision is not an ancestor
// of the child_revision.
type NotAncestorError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent_revision is the revision checked against ChildRevision for whether it
	// is an ancestor of ChildRevision
	ParentRevision []byte `protobuf:"bytes,1,opt,name=parent_revision,json=parentRevision,proto3" json:"parent_revision,omitempty"`
	// child_revision is the revision checked against ParentRevision for whether
	// it is a descendent of ChildRevision.
	ChildRevision []byte `protobuf:"bytes,2,opt,name=child_revision,json=childRevision,proto3" json:"child_revision,omitempty"`
}

func (x *NotAncestorError) Reset() {
	*x = NotAncestorError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotAncestorError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotAncestorError) ProtoMessage() {}

func (x *NotAncestorError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotAncestorError.ProtoReflect.Descriptor instead.
func (*NotAncestorError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{3}
}

func (x *NotAncestorError) GetParentRevision() []byte {
	if x != nil {
		return x.ParentRevision
	}
	return nil
}

func (x *NotAncestorError) GetChildRevision() []byte {
	if x != nil {
		return x.ChildRevision
	}
	return nil
}

// ChangesAlreadyAppliedError is an error returned when the operation would
// have resulted in no changes because these changes have already been applied.
type ChangesAlreadyAppliedError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangesAlreadyAppliedError) Reset() {
	*x = ChangesAlreadyAppliedError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangesAlreadyAppliedError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesAlreadyAppliedError) ProtoMessage() {}

func (x *ChangesAlreadyAppliedError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesAlreadyAppliedError.ProtoReflect.Descriptor instead.
func (*ChangesAlreadyAppliedError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{4}
}

// MergeConflictError is an error returned in the case when merging two commits
// fails due to a merge conflict.
type MergeConflictError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// conflicting_files is the set of files which have been conflicting. If this
	// field is empty, then there has still been a merge conflict, but it wasn't
	// able to determine which files have been conflicting.
	ConflictingFiles [][]byte `protobuf:"bytes,1,rep,name=conflicting_files,json=conflictingFiles,proto3" json:"conflicting_files,omitempty"`
	// conflicting_commit_ids is the set of commit IDs that caused the conflict. In the general case,
	// this should be set to two commit IDs.
	ConflictingCommitIds []string `protobuf:"bytes,2,rep,name=conflicting_commit_ids,json=conflictingCommitIds,proto3" json:"conflicting_commit_ids,omitempty"`
}

func (x *MergeConflictError) Reset() {
	*x = MergeConflictError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeConflictError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeConflictError) ProtoMessage() {}

func (x *MergeConflictError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeConflictError.ProtoReflect.Descriptor instead.
func (*MergeConflictError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{5}
}

func (x *MergeConflictError) GetConflictingFiles() [][]byte {
	if x != nil {
		return x.ConflictingFiles
	}
	return nil
}

func (x *MergeConflictError) GetConflictingCommitIds() []string {
	if x != nil {
		return x.ConflictingCommitIds
	}
	return nil
}

// ReferencesLockedError is an error returned when an ref update fails because
// the references have already been locked by another process.
type ReferencesLockedError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// refs are the references that could not be locked.
	Refs [][]byte `protobuf:"bytes,1,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (x *ReferencesLockedError) Reset() {
	*x = ReferencesLockedError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferencesLockedError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferencesLockedError) ProtoMessage() {}

func (x *ReferencesLockedError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferencesLockedError.ProtoReflect.Descriptor instead.
func (*ReferencesLockedError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{6}
}

func (x *ReferencesLockedError) GetRefs() [][]byte {
	if x != nil {
		return x.Refs
	}
	return nil
}

// ReferenceExistsError is an error returned when a reference that ought not to exist does exist
// already.
type ReferenceExistsError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reference_name is the name of the reference that exists already.
	ReferenceName []byte `protobuf:"bytes,1,opt,name=reference_name,json=referenceName,proto3" json:"reference_name,omitempty"`
	// oid is the object ID of the reference that preexists already.
	Oid string `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *ReferenceExistsError) Reset() {
	*x = ReferenceExistsError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceExistsError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceExistsError) ProtoMessage() {}

func (x *ReferenceExistsError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceExistsError.ProtoReflect.Descriptor instead.
func (*ReferenceExistsError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{7}
}

func (x *ReferenceExistsError) GetReferenceName() []byte {
	if x != nil {
		return x.ReferenceName
	}
	return nil
}

func (x *ReferenceExistsError) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

// ReferenceNotFoundError is an error retruned when a reference that ought to exist does not exist.
type ReferenceNotFoundError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reference_name is the name of the reference that does not exist.
	ReferenceName []byte `protobuf:"bytes,1,opt,name=reference_name,json=referenceName,proto3" json:"reference_name,omitempty"`
}

func (x *ReferenceNotFoundError) Reset() {
	*x = ReferenceNotFoundError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceNotFoundError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceNotFoundError) ProtoMessage() {}

func (x *ReferenceNotFoundError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceNotFoundError.ProtoReflect.Descriptor instead.
func (*ReferenceNotFoundError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{8}
}

func (x *ReferenceNotFoundError) GetReferenceName() []byte {
	if x != nil {
		return x.ReferenceName
	}
	return nil
}

// ReferenceStateMismatchError is an error returned when updating a reference fails because its pointing to a different
// object ID than expected.
type ReferenceStateMismatchError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reference_name is the name of the reference that was failed to update.
	ReferenceName []byte `protobuf:"bytes,1,opt,name=reference_name,json=referenceName,proto3" json:"reference_name,omitempty"`
	// expected_object_id is the object ID that the reference was expected to point to but didn't.
	ExpectedObjectId []byte `protobuf:"bytes,2,opt,name=expected_object_id,json=expectedObjectId,proto3" json:"expected_object_id,omitempty"`
	// actual_object_id is the object ID that the reference actually pointed to at the time when it was tried to be
	// updated.
	ActualObjectId []byte `protobuf:"bytes,3,opt,name=actual_object_id,json=actualObjectId,proto3" json:"actual_object_id,omitempty"`
}

func (x *ReferenceStateMismatchError) Reset() {
	*x = ReferenceStateMismatchError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceStateMismatchError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceStateMismatchError) ProtoMessage() {}

func (x *ReferenceStateMismatchError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceStateMismatchError.ProtoReflect.Descriptor instead.
func (*ReferenceStateMismatchError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{9}
}

func (x *ReferenceStateMismatchError) GetReferenceName() []byte {
	if x != nil {
		return x.ReferenceName
	}
	return nil
}

func (x *ReferenceStateMismatchError) GetExpectedObjectId() []byte {
	if x != nil {
		return x.ExpectedObjectId
	}
	return nil
}

func (x *ReferenceStateMismatchError) GetActualObjectId() []byte {
	if x != nil {
		return x.ActualObjectId
	}
	return nil
}

// ReferenceUpdateError is an error returned when updating a reference has
// failed.
type ReferenceUpdateError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reference_name is the name of the reference that failed to be updated.
	ReferenceName []byte `protobuf:"bytes,1,opt,name=reference_name,json=referenceName,proto3" json:"reference_name,omitempty"`
	// old_oid is the object ID the reference should have pointed to before the update.
	OldOid string `protobuf:"bytes,2,opt,name=old_oid,json=oldOid,proto3" json:"old_oid,omitempty"`
	// new_oid is the object ID the reference should have pointed to after the update.
	NewOid string `protobuf:"bytes,3,opt,name=new_oid,json=newOid,proto3" json:"new_oid,omitempty"`
}

func (x *ReferenceUpdateError) Reset() {
	*x = ReferenceUpdateError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceUpdateError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceUpdateError) ProtoMessage() {}

func (x *ReferenceUpdateError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceUpdateError.ProtoReflect.Descriptor instead.
func (*ReferenceUpdateError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{10}
}

func (x *ReferenceUpdateError) GetReferenceName() []byte {
	if x != nil {
		return x.ReferenceName
	}
	return nil
}

func (x *ReferenceUpdateError) GetOldOid() string {
	if x != nil {
		return x.OldOid
	}
	return ""
}

func (x *ReferenceUpdateError) GetNewOid() string {
	if x != nil {
		return x.NewOid
	}
	return ""
}

// ResolveRevisionError is an error returned when resolving a specific revision
// has failed.
type ResolveRevisionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// revision is the name of the revision that was tried to be resolved.
	Revision []byte `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *ResolveRevisionError) Reset() {
	*x = ResolveRevisionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveRevisionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRevisionError) ProtoMessage() {}

func (x *ResolveRevisionError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRevisionError.ProtoReflect.Descriptor instead.
func (*ResolveRevisionError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{11}
}

func (x *ResolveRevisionError) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

// LimitError is an error returned when Gitaly enforces request limits.
type LimitError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error_message provides context into why a limit was enforced.
	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// retry_after provides the duration after which a retry is safe.
	// 0 indicates non-retryable.
	RetryAfter *durationpb.Duration `protobuf:"bytes,2,opt,name=retry_after,json=retryAfter,proto3" json:"retry_after,omitempty"`
}

func (x *LimitError) Reset() {
	*x = LimitError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitError) ProtoMessage() {}

func (x *LimitError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitError.ProtoReflect.Descriptor instead.
func (*LimitError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{12}
}

func (x *LimitError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *LimitError) GetRetryAfter() *durationpb.Duration {
	if x != nil {
		return x.RetryAfter
	}
	return nil
}

// CustomHookError is an error returned when Gitaly executes a custom hook and the hook returns
// a non-zero return code.
type CustomHookError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stdout is the standard output of the hook that has failed, if any. Data may be truncated.
	Stdout []byte `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// stderr is the standard error of the hook that has failed, if any. Data may be truncated.
	Stderr []byte `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	// hook_type is the type of the hook.
	HookType CustomHookError_HookType `protobuf:"varint,3,opt,name=hook_type,json=hookType,proto3,enum=gitaly.CustomHookError_HookType" json:"hook_type,omitempty"`
}

func (x *CustomHookError) Reset() {
	*x = CustomHookError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomHookError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomHookError) ProtoMessage() {}

func (x *CustomHookError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomHookError.ProtoReflect.Descriptor instead.
func (*CustomHookError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{13}
}

func (x *CustomHookError) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *CustomHookError) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *CustomHookError) GetHookType() CustomHookError_HookType {
	if x != nil {
		return x.HookType
	}
	return CustomHookError_HOOK_TYPE_UNSPECIFIED
}

// PathError is an error returned when there is an issue with the path provided.
type PathError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the file or directory path that triggered the error. The path may be
	// truncated due to size limits.
	Path []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// error_type is the type of path error that occurred.
	ErrorType PathError_ErrorType `protobuf:"varint,2,opt,name=error_type,json=errorType,proto3,enum=gitaly.PathError_ErrorType" json:"error_type,omitempty"`
}

func (x *PathError) Reset() {
	*x = PathError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathError) ProtoMessage() {}

func (x *PathError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathError.ProtoReflect.Descriptor instead.
func (*PathError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{14}
}

func (x *PathError) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *PathError) GetErrorType() PathError_ErrorType {
	if x != nil {
		return x.ErrorType
	}
	return PathError_ERROR_TYPE_UNSPECIFIED
}

// PathNotFoundError is an error returned when a given path cannot be found.
type PathNotFoundError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the path that could not be found.
	Path []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *PathNotFoundError) Reset() {
	*x = PathNotFoundError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathNotFoundError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathNotFoundError) ProtoMessage() {}

func (x *PathNotFoundError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathNotFoundError.ProtoReflect.Descriptor instead.
func (*PathNotFoundError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{15}
}

func (x *PathNotFoundError) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

// AmbiguousReferenceError is an error returned when an reference is unknown.
type AmbiguousReferenceError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reference is the reference passed to the git command.
	Reference []byte `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *AmbiguousReferenceError) Reset() {
	*x = AmbiguousReferenceError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmbiguousReferenceError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmbiguousReferenceError) ProtoMessage() {}

func (x *AmbiguousReferenceError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmbiguousReferenceError.ProtoReflect.Descriptor instead.
func (*AmbiguousReferenceError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{16}
}

func (x *AmbiguousReferenceError) GetReference() []byte {
	if x != nil {
		return x.Reference
	}
	return nil
}

// BadObjectError is an error returned when git cannot find a valid object based on its id.
type BadObjectError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object_id is the object id passed to the git command.
	ObjectId []byte `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *BadObjectError) Reset() {
	*x = BadObjectError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadObjectError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadObjectError) ProtoMessage() {}

func (x *BadObjectError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadObjectError.ProtoReflect.Descriptor instead.
func (*BadObjectError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{17}
}

func (x *BadObjectError) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

// InvalidRevisionRange is an error returned when the range given to the git log command is invalid.
type InvalidRevisionRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// range is the commit range passed to git log command.
	Range []byte `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *InvalidRevisionRange) Reset() {
	*x = InvalidRevisionRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidRevisionRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidRevisionRange) ProtoMessage() {}

func (x *InvalidRevisionRange) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidRevisionRange.ProtoReflect.Descriptor instead.
func (*InvalidRevisionRange) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{18}
}

func (x *InvalidRevisionRange) GetRange() []byte {
	if x != nil {
		return x.Range
	}
	return nil
}

// UncategorizedGitLogError is for the git log command errors that we don't know or not necessary to be categorized right now.
type UncategorizedGitLogError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UncategorizedGitLogError) Reset() {
	*x = UncategorizedGitLogError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncategorizedGitLogError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncategorizedGitLogError) ProtoMessage() {}

func (x *UncategorizedGitLogError) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncategorizedGitLogError.ProtoReflect.Descriptor instead.
func (*UncategorizedGitLogError) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{19}
}

var File_errors_proto protoreflect.FileDescriptor

var file_errors_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22,
	0xbf, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xdf, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x50, 0x41,
	0x54, 0x48, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45,
	0x52, 0x53, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x06, 0x22, 0x2b, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x66, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x22, 0x62,
	0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x41, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x77, 0x0a, 0x12, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x22, 0x4f, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x16, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x4f, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x65, 0x77, 0x4f, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x0a,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0xf2, 0x01, 0x0a, 0x0f,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12,
	0x3d, 0x0a, 0x09, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x48, 0x6f, 0x6f, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x70,
	0x0a, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f,
	0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x03,
	0x22, 0x89, 0x02, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xab,
	0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x54,
	0x48, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f,
	0x45, 0x53, 0x43, 0x41, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f,
	0x52, 0x59, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x04, 0x22, 0x27, 0x0a, 0x11,
	0x50, 0x61, 0x74, 0x68, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x37, 0x0a, 0x17, 0x41, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x6f,
	0x75, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x2d,
	0x0a, 0x0e, 0x42, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x2c, 0x0a,
	0x14, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x55,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x47, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2d, 0x6f, 0x72, 0x67,
	0x2f, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x2f, 0x76, 0x31, 0x36, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_errors_proto_rawDescOnce sync.Once
	file_errors_proto_rawDescData = file_errors_proto_rawDesc
)

func file_errors_proto_rawDescGZIP() []byte {
	file_errors_proto_rawDescOnce.Do(func() {
		file_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_errors_proto_rawDescData)
	})
	return file_errors_proto_rawDescData
}

var file_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_errors_proto_goTypes = []interface{}{
	(IndexError_ErrorType)(0),           // 0: gitaly.IndexError.ErrorType
	(CustomHookError_HookType)(0),       // 1: gitaly.CustomHookError.HookType
	(PathError_ErrorType)(0),            // 2: gitaly.PathError.ErrorType
	(*AccessCheckError)(nil),            // 3: gitaly.AccessCheckError
	(*IndexError)(nil),                  // 4: gitaly.IndexError
	(*InvalidRefFormatError)(nil),       // 5: gitaly.InvalidRefFormatError
	(*NotAncestorError)(nil),            // 6: gitaly.NotAncestorError
	(*ChangesAlreadyAppliedError)(nil),  // 7: gitaly.ChangesAlreadyAppliedError
	(*MergeConflictError)(nil),          // 8: gitaly.MergeConflictError
	(*ReferencesLockedError)(nil),       // 9: gitaly.ReferencesLockedError
	(*ReferenceExistsError)(nil),        // 10: gitaly.ReferenceExistsError
	(*ReferenceNotFoundError)(nil),      // 11: gitaly.ReferenceNotFoundError
	(*ReferenceStateMismatchError)(nil), // 12: gitaly.ReferenceStateMismatchError
	(*ReferenceUpdateError)(nil),        // 13: gitaly.ReferenceUpdateError
	(*ResolveRevisionError)(nil),        // 14: gitaly.ResolveRevisionError
	(*LimitError)(nil),                  // 15: gitaly.LimitError
	(*CustomHookError)(nil),             // 16: gitaly.CustomHookError
	(*PathError)(nil),                   // 17: gitaly.PathError
	(*PathNotFoundError)(nil),           // 18: gitaly.PathNotFoundError
	(*AmbiguousReferenceError)(nil),     // 19: gitaly.AmbiguousReferenceError
	(*BadObjectError)(nil),              // 20: gitaly.BadObjectError
	(*InvalidRevisionRange)(nil),        // 21: gitaly.InvalidRevisionRange
	(*UncategorizedGitLogError)(nil),    // 22: gitaly.UncategorizedGitLogError
	(*durationpb.Duration)(nil),         // 23: google.protobuf.Duration
}
var file_errors_proto_depIdxs = []int32{
	0,  // 0: gitaly.IndexError.error_type:type_name -> gitaly.IndexError.ErrorType
	23, // 1: gitaly.LimitError.retry_after:type_name -> google.protobuf.Duration
	1,  // 2: gitaly.CustomHookError.hook_type:type_name -> gitaly.CustomHookError.HookType
	2,  // 3: gitaly.PathError.error_type:type_name -> gitaly.PathError.ErrorType
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_errors_proto_init() }
func file_errors_proto_init() {
	if File_errors_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_errors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessCheckError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidRefFormatError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotAncestorError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangesAlreadyAppliedError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeConflictError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferencesLockedError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceExistsError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceNotFoundError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceStateMismatchError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceUpdateError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveRevisionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomHookError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathNotFoundError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmbiguousReferenceError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadObjectError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidRevisionRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errors_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncategorizedGitLogError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_errors_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_errors_proto_goTypes,
		DependencyIndexes: file_errors_proto_depIdxs,
		EnumInfos:         file_errors_proto_enumTypes,
		MessageInfos:      file_errors_proto_msgTypes,
	}.Build()
	File_errors_proto = out.File
	file_errors_proto_rawDesc = nil
	file_errors_proto_goTypes = nil
	file_errors_proto_depIdxs = nil
}
